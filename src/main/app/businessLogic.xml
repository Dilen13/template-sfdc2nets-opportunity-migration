<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:netsuite="http://www.mulesoft.org/schema/mule/netsuite"
	xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.6.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/netsuite http://www.mulesoft.org/schema/mule/netsuite/current/mule-netsuite.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
	<data-mapper:config name="Opportunity_To_OPPORTUNITY"
		transformationGraphPath="opportunity_to_opportunity.grf" doc:name="Opportunity_To_OPPORTUNITY" />
    <data-mapper:config name="Payload_To_CUSTOMER" transformationGraphPath="payload_to_customer.grf" doc:name="Payload_To_CUSTOMER"/>

	<batch:job name="migrateOpportunitiesBatch" max-failed-records="-1">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:input>
			<sfdc:query config-ref="Salesforce"
				query="dsql:SELECT Id, Name, Amount, StageName, Probability, CloseDate, Account.Id, Account.Name FROM Opportunity WHERE Account.Id &lt;&gt; null"
				fetchSize="${page.size}" doc:name="query Opportunities from Salesforce" />
		</batch:input>
		<batch:process-records>
			<batch:step name="getOpportunityInNetsuiteStep" accept-policy="ALL">
				<enricher source="#[payload]" target="#[recordVars['opportunityInNetsuite']]"
					doc:name="store result in record var 'opportunityInNetsuite'">
					<processor-chain doc:name="Processor Chain">
                        <netsuite:get-record config-ref="Netsuite" doc:name="query Opportunity in Netsuite">
                            <netsuite:record-ref externalId="#[payload['Id']]" type="OPPORTUNITY"/>
                        </netsuite:get-record>

					</processor-chain>
				</enricher>
			</batch:step>
			<batch:step name="getCustomerIfExistsStep" accept-policy="ALL">
				<enricher source="#[payload]" target="#[recordVars['customerInNetsuite']]"
					doc:name="store result in customerInNetsuite">
					<processor-chain doc:name="Processor Chain">
						<netsuite:query-records config-ref="Netsuite"
							query="dsql:SELECT companyName,entityId,entityStatus,externalId,internalId FROM CUSTOMER WHERE companyName = '#[payload['Account']['Name']]'"
							doc:name="query Customer in Netsuite" />
						<expression-component doc:name="retrieve Customer object"><![CDATA[java.util.HashMap customer;

if (payload.hasNext()){
	customer = payload.next();
}

payload = customer;]]></expression-component>
					</processor-chain>
				</enricher>
			</batch:step>
			<batch:step name="createCustomerIfDoesNotExistStep"
				accept-expression="#[recordVars['customerInNetsuite'] is NullPayload]" accept-policy="ALL">
				<enricher target="#[recordVars['customerInNetsuite']]"
					doc:name="store result in customerInNetsuite">
					<processor-chain doc:name="Processor Chain">
                        <data-mapper:transform config-ref="Payload_To_CUSTOMER" doc:name="Payload To CUSTOMER">
                            <data-mapper:input-arguments>
                                <data-mapper:input-argument key="AccountName">#[payload['Account']['Name']]</data-mapper:input-argument>
                                <data-mapper:input-argument key="SubsidiaryInternalId">${nets.customer.subsidiary.internalId}</data-mapper:input-argument>
                            </data-mapper:input-arguments>
                        </data-mapper:transform>
						<netsuite:add-record config-ref="Netsuite"
							recordType="CUSTOMER" doc:name="create Customer in Netsuite">
							<netsuite:attributes ref="#[payload]">
							</netsuite:attributes>
						</netsuite:add-record>
						<logger
							message="New Customer created in Netsuite: #[payload.getInternalId()]"
							level="INFO" doc:name="log created Customer" />
						<netsuite:get-record config-ref="Netsuite"
							
							doc:name="get created Customer in Netsuite" >
                            <netsuite:record-ref internalId="#[payload.getInternalId()]" type="CUSTOMER"/>
                        </netsuite:get-record>

					</processor-chain>
				</enricher>
			</batch:step>
            <batch:step name="upsertOpportunitiesInNetsuiteStep" accept-expression="!(payload is NullPayload)" accept-policy="ALL">
                <data-mapper:transform config-ref="Opportunity_To_OPPORTUNITY" doc:name="Opportunity To OPPORTUNITY">
                    <data-mapper:input-arguments>
                        <data-mapper:input-argument key="defaultStatusId">${nets.opportunity.status.internalId}</data-mapper:input-argument>
                        <data-mapper:input-argument key="entityInternalId">#[recordVars['customerInNetsuite']['internalId']]</data-mapper:input-argument>
                    </data-mapper:input-arguments>
                </data-mapper:transform>
                <netsuite:upsert-record config-ref="Netsuite" recordType="OPPORTUNITY" doc:name="upsert Opportunities in Netsuite">
                    <netsuite:attributes ref="#[payload]"/>
                </netsuite:upsert-record>
                <logger message="Upserted opportunity with internal ID: #[payload.getInternalId()] " level="INFO" doc:name="log Upsert result"/>
            </batch:step>


		</batch:process-records>
		<batch:on-complete>
			<scatter-gather doc:name="All">
				<processor-chain>
					<json:object-to-json-transformer
						doc:name="transform BatchJobInstance to JSON" />
					<logger message="Migration process has finished: #[payload]"
						level="INFO" doc:name="log 'Migration process has finished'" />
				</processor-chain>
				<processor-chain>
                    <parse-template location="./src/main/resources/email/body.html" doc:name="Parse Template"/>

					<smtp:outbound-endpoint host="${smtp.host}"
						port="${smtp.port}" user="${smtp.user}" password="${smtp.password}"
						to="${mail.to}" from="${mail.from}" subject="${mail.subject}"
						responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail" />
				</processor-chain>
			</scatter-gather>
		</batch:on-complete>
	</batch:job>

	<flow name="mainFlow" processingStrategy="synchronous"
		doc:description="This flow is the entry point to the Anypoint Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Anypoint Template exposes to trigger it.

">
		<batch:execute name="migrateOpportunitiesBatch"
			doc:name="trigger migrateOpportunitiesBatch" />
		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="catch Exception and call defaultChoiceExceptionStrategy" />
	</flow>

</mule>
